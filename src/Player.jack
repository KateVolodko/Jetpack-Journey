/** Создание и обновление изображения игрока */
class Player {
  field int xPos, yPos;                                 // координата по X, Y
  field int width, height;                              // ширина, высота игрока
  field int numPlayerState;                             
  field Array currPlayer;                               // рисунок текущего состояния
  field Array firstState, secondState;                  // рисунок состояний игрока

  /** Конструктор принимает координату по y для начального отображения игрока */
  constructor Player new(int playerYPosDefault) {
    let yPos = playerYPosDefault;
    let xPos = 160;
    let width = 16;
    let height = 23;
    let numPlayerState = 0;
    do buildFirstArray();
    do buildSecondArray();
    do draw();
    return this;
  }

  /** Сдвиг игрока вверх */
  method void moveUp() {
    do erase();
    if (yPos > height + 5) {
      let yPos = yPos - 5;
    } else {
      let yPos = height;
    }
    return;
  }

  /** Сдвиг игрока вниз */
  method void moveDown() {
    do erase();
    if (yPos < 225) {
      let yPos = yPos + 30;
    } else {
      let yPos = 255;
    }
    return;
  }

  /** Удаление изображения игрока */
  method void erase() {
    do Screen.setColor(false);
    do Screen.drawRectangle(xPos, yPos, xPos + width, yPos + height);
    return;
  }

  /** Создание первого состояния игрока */
  method void buildFirstArray() {
    let firstState = Array.new(23);
    let firstState[0] = 4064;
    let firstState[1] = 4112;
    let firstState[2] = 8200;
    let firstState[3] = 16388;
    let firstState[4] = 16388;
    let firstState[5] = 16452;
    let firstState[6] = 20644;
    let firstState[7] = -28636;
    let firstState[8] = 16452;
    let firstState[9] = 16392;
    let firstState[10] = 10256;
    let firstState[11] = 4192;
    let firstState[12] = 3456;
    let firstState[13] = 2174;
    let firstState[14] = 2114;
    let firstState[15] = 12610;
    let firstState[16] = 16962;
    let firstState[17] = 15426;
    let firstState[18] = 2114;
    let firstState[19] = 2302;
    let firstState[20] = 2236;
    let firstState[21] = 4248;
    let firstState[22] = 3864;
    return;
  }

  /** Создание второго состояния игрока */
  method void buildSecondArray() {
    let secondState = Array.new(23);
    let secondState[0] = 4064;
    let secondState[1] = 4112;
    let secondState[2] = 8200;
    let secondState[3] = 16388;
    let secondState[4] = 16388;
    let secondState[5] = 16452;
    let secondState[6] = 20644;
    let secondState[7] = -28636;
    let secondState[8] = 16452;
    let secondState[9] = 16392;
    let secondState[10] = 10256;
    let secondState[11] = 4192;
    let secondState[12] = 3456;
    let secondState[13] = 2174;
    let secondState[14] = 2114;
    let secondState[15] = 12610;
    let secondState[16] = 16962;
    let secondState[17] = 15426;
    let secondState[18] = 2114;
    let secondState[19] = 2302;
    let secondState[20] = 2176;
    let secondState[21] = 4224;
    let secondState[22] = 3840;
    return;
  }

  /** Определение состояний игрока */
  method void cyclePlayerState() {
    let numPlayerState = MyMath.mod (numPlayerState + 1, 2);
    return;
  }

  /** Координаты текущего состояния игрока */
  method Array getCurrState() {
    if (numPlayerState = 0) {
      return firstState;
    }
    return secondState;
  }

  /** Отрисовка игрока */
  method void draw() {
    var int memAddress;
    let memAddress = (16384 + (yPos * 32) + (xPos/16));
    let currPlayer = getCurrState();
    do Memory.poke(memAddress+0, currPlayer[0]);
    do Memory.poke(memAddress+32, currPlayer[1]);
    do Memory.poke(memAddress+64, currPlayer[2]);
    do Memory.poke(memAddress+96, currPlayer[3]);
    do Memory.poke(memAddress+128, currPlayer[4]);
    do Memory.poke(memAddress+160, currPlayer[5]);
    do Memory.poke(memAddress+192, currPlayer[6]);
    do Memory.poke(memAddress+224, currPlayer[7]);
    do Memory.poke(memAddress+256, currPlayer[8]);
    do Memory.poke(memAddress+288, currPlayer[9]);
    do Memory.poke(memAddress+320, currPlayer[10]);
    do Memory.poke(memAddress+352, currPlayer[11]);
    do Memory.poke(memAddress+384, currPlayer[12]);
    do Memory.poke(memAddress+416, currPlayer[13]);
    do Memory.poke(memAddress+448, currPlayer[14]);
    do Memory.poke(memAddress+480, currPlayer[15]);
    do Memory.poke(memAddress+512, currPlayer[16]);
    do Memory.poke(memAddress+544, currPlayer[17]);
    do Memory.poke(memAddress+576, currPlayer[18]);
    do Memory.poke(memAddress+608, currPlayer[19]);
    do Memory.poke(memAddress+640, currPlayer[20]);
    do Memory.poke(memAddress+672, currPlayer[21]);
    do Memory.poke(memAddress+704, currPlayer[22]);
    return;
  }

  method int getXPos() {
    return xPos;
  }

  method int getYPos() {
    return yPos;
  }

  method int getWidth() {
    return width;
  }

  method int getHeight() {
    return height;
  }

  method void dispose() {
     do Memory.deAlloc(this);
     return;
  }
}